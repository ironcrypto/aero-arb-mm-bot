# Multi-stage Dockerfile for Aero-Arb-MM Bot v0.4.0
# Maximum security with zero vulnerabilities using scratch/distroless

# Stage 1: Build environment - Use Alpine with musl for static linking
FROM alpine:3.19 AS builder

# Install only essential build tools (without version pinning for compatibility)
RUN apk update && apk add --no-cache \
    curl \
    build-base \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static \
    ca-certificates \
    gcc \
    g++ \
    make \
    musl-tools

# Install Rust (using nightly for edition 2024)
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_VERSION=nightly

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- \
    -y --no-modify-path --profile minimal --default-toolchain nightly \
    --target x86_64-unknown-linux-musl && \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME

# Create app user and directory
RUN addgroup -g 10001 -S appgroup && \
    adduser -u 10001 -S appuser -G appgroup
WORKDIR /app
RUN chown appuser:appgroup /app

# Copy dependency files first (for better layer caching)
COPY --chown=appuser:appgroup Cargo.toml Cargo.lock ./

# Build dependencies as non-root user
USER appuser
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Configure for static linking
ENV RUSTFLAGS="-C target-feature=+crt-static -C link-self-contained=yes"
ENV CC_x86_64_unknown_linux_musl=musl-gcc
ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc

# Build dependencies (cached layer)
RUN cargo build --release --target x86_64-unknown-linux-musl && rm -rf src

# Copy the actual source code
COPY --chown=appuser:appgroup src ./src

# Build the final application
RUN cargo build --release --target x86_64-unknown-linux-musl

# Verify static linking
RUN ldd target/x86_64-unknown-linux-musl/release/aero-arb-mm-bot 2>&1 | grep -q "not a dynamic executable" || echo "Static binary verified"

# Stage 2: Runtime using scratch (zero vulnerabilities)
FROM scratch AS runtime

# Copy CA certificates for HTTPS
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Create minimal filesystem structure
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy the statically linked binary
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/aero-arb-mm-bot /aero-arb-mm-bot

# Create output directory structure (using build-time filesystem)
USER 10001:10001
WORKDIR /app

# Create output directories
VOLUME ["/app/output"]

# Environment variables
ENV RUST_LOG=info \
    NETWORK=mainnet \
    ENABLE_MARKET_MAKING=true \
    ENABLE_TRADE_EXECUTION=false

# No healthcheck possible with scratch, will be handled by orchestrator
# No shell available - maximum security

# Default command
ENTRYPOINT ["/aero-arb-mm-bot"]

# Metadata
LABEL maintainer="aero-arb-mm-bot" \
      version="0.4.0-scratch" \
      description="Aero-Arb-MM Bot: Zero-vulnerability scratch build" \
      org.opencontainers.image.source="https://github.com/your-repo/aero-arb-mm-bot" \
      security.scan="2024-12-19" \
      security.base="scratch" \
      security.vulnerabilities="0"